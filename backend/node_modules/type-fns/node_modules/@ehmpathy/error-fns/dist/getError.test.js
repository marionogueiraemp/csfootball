"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const HelpfulError_1 = require("./HelpfulError");
const getError_1 = require("./getError");
describe('getError', () => {
    it('can get error from synchronous logic', () => {
        const doSomething = () => {
            throw new HelpfulError_1.HelpfulError('found me');
        };
        const error = (0, getError_1.getError)(() => doSomething());
        expect(error).toBeInstanceOf(HelpfulError_1.HelpfulError);
        expect(error.message).toContain('found me');
    });
    it('can get error from asynchronous logic', () => __awaiter(void 0, void 0, void 0, function* () {
        const doSomething = () => __awaiter(void 0, void 0, void 0, function* () {
            throw new HelpfulError_1.HelpfulError('found me');
        });
        const error = yield (0, getError_1.getError)(() => doSomething());
        expect(error).toBeInstanceOf(HelpfulError_1.HelpfulError);
        expect(error.message).toContain('found me');
    }));
    it('can get error from promise', () => __awaiter(void 0, void 0, void 0, function* () {
        const doSomething = () => __awaiter(void 0, void 0, void 0, function* () {
            throw new HelpfulError_1.HelpfulError('found me');
        });
        const error = yield (0, getError_1.getError)(doSomething());
        expect(error).toBeInstanceOf(HelpfulError_1.HelpfulError);
        expect(error.message).toContain('found me');
    }));
});
//# sourceMappingURL=getError.test.js.map