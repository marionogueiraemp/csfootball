"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getError = exports.NoErrorThrownError = void 0;
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
const type_fns_1 = require("type-fns");
class NoErrorThrownError extends Error {
}
exports.NoErrorThrownError = NoErrorThrownError;
function getError(from) {
    // run everything in a try catch, to handle the case where the function throws an error immediately (does not return a promise)
    try {
        // execute the function to get the result, if its a function
        const result = (0, type_fns_1.isAFunction)(from) ? from() : from;
        // handle the result = promise case
        if ((0, type_fns_1.isAPromise)(result))
            return result
                .then(() => {
                throw new NoErrorThrownError();
            })
                .catch((error) => error);
        // handle the result = nonpromise case
        throw new NoErrorThrownError(); // should have never reached here, as it should have thrown when we first called it
    }
    catch (error) {
        return error;
    }
}
exports.getError = getError;
//# sourceMappingURL=getError.js.map