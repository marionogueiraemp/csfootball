"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BadRequestError_1 = require("./BadRequestError");
const getError_1 = require("./getError");
describe('BadRequestError', () => {
    it('should produce a helpful, observable error message', () => {
        const error = new BadRequestError_1.BadRequestError('no tires on the vehicle', {
            tires: [],
        });
        expect(error).toMatchSnapshot();
    });
    it('should be throwable in a ternary conveniently and precisely', () => {
        const error = (0, getError_1.getError)(() => {
            var _a, _b;
            // this case should not throw
            const customerOne = {
                phone: 'yes',
            };
            const phoneOne = (_a = customerOne.phone) !== null && _a !== void 0 ? _a : BadRequestError_1.BadRequestError.throw('phone one not found!');
            // but this case should throw
            const customerTwo = {
                phone: null,
            };
            const phoneTwo = (_b = customerTwo.phone) !== null && _b !== void 0 ? _b : BadRequestError_1.BadRequestError.throw('phone two not found!');
        });
        expect(error).toBeInstanceOf(BadRequestError_1.BadRequestError);
        expect(error.message).toContain('phone two not found!');
    });
});
//# sourceMappingURL=BadRequestError.test.js.map