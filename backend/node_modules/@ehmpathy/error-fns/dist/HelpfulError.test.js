"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const HelpfulError_1 = require("./HelpfulError");
const getError_1 = require("./getError");
const env_1 = require("./utils/env");
jest.mock('./utils/env');
const getEnvOptionsMock = env_1.getEnvOptions;
getEnvOptionsMock.mockReturnValue({ expand: false });
describe('HelpfulError', () => {
    it('should produce a helpful, observable error message', () => {
        const error = new HelpfulError_1.HelpfulError('could not get joke about paper', {
            why: 'it was tearable', // ðŸ˜‚
        });
        expect(error).toMatchSnapshot();
    });
    it('should be throwable in a ternary conveniently and precisely', () => {
        const error = (0, getError_1.getError)(() => {
            var _a, _b;
            // this case should not throw
            const customerOne = {
                phone: 'yes',
            };
            const phoneOne = (_a = customerOne.phone) !== null && _a !== void 0 ? _a : HelpfulError_1.HelpfulError.throw('phone one not found!');
            // but this case should throw
            const customerTwo = {
                phone: null,
            };
            const phoneTwo = (_b = customerTwo.phone) !== null && _b !== void 0 ? _b : HelpfulError_1.HelpfulError.throw('phone two not found!');
        });
        expect(error).toBeInstanceOf(HelpfulError_1.HelpfulError);
        expect(error.message).toEqual('phone two not found!');
    });
    it('should be possible to extend the call stack of an error via cause', () => {
        const errorOriginal = new Error('some original error');
        const errorHelpful = new HelpfulError_1.HelpfulError('some helpful error', {
            cause: errorOriginal,
        });
        expect(errorHelpful).toMatchSnapshot();
        expect(errorHelpful.cause).toBeDefined();
        expect(errorHelpful.cause).toMatchSnapshot();
    });
    it('should be able to prettify the error metadata when ERROR_EXPAND env var is true', () => {
        getEnvOptionsMock.mockReturnValueOnce({ expand: true });
        const error = new HelpfulError_1.HelpfulError('could not get joke about pizza', {
            why: 'it was too cheesy', // ðŸ˜‚
        });
        expect(error).toMatchSnapshot();
    });
    it('should serialize to json expressively', () => {
        const error = new HelpfulError_1.HelpfulError('could not get joke about pizza', {
            why: 'it was too cheesy', // ðŸ˜‚
        });
        const json = JSON.stringify(error);
        expect(json).toContain('joke about pizza');
        expect(json).toContain('it was too cheesy');
    });
});
//# sourceMappingURL=HelpfulError.test.js.map