var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { given } from 'test-fns';
import { createSecureDistributedAuthToken } from './createSecureDistributedAuthToken';
import { getAuthedClaims } from './getAuthedClaims';
import { getPublicKey } from './getPublicKey/getPublicKey';
import { exampleEccKeyPair, exampleRsaKeyPair, } from './signingAlgorithm/createVerifiableSignature.test';
// mock that we discover the real public key each time
jest.mock('./getPublicKey/getPublicKey');
const getPublicKeyMock = getPublicKey;
describe('createSecureToken', () => {
    given('rsa signing algorithm', () => {
        const alg = 'RS256';
        const keypair = exampleRsaKeyPair;
        beforeEach(() => {
            getPublicKeyMock.mockReturnValue(keypair.publicKey);
        });
        it('should be able to create a token that we can later getAuthedClaims on', () => __awaiter(void 0, void 0, void 0, function* () {
            // create a token
            const token = createSecureDistributedAuthToken({
                headerClaims: { alg, kid: '4.some_directory', typ: 'JWT' },
                claims: {
                    iss: 'https://auth.whodis.io/...',
                    aud: '__some_directory__',
                    sub: '__some_user__',
                    exp: 2516239022,
                },
                privateKey: keypair.privateKey,
            });
            expect(typeof token).toEqual('string'); // sanity check
            // check that we can auth on it, if the publicKey is discoverable
            const claims = yield getAuthedClaims({
                token,
                issuer: 'https://auth.whodis.io/...',
                audience: '__some_directory__',
            });
            expect(claims).toEqual({
                iss: 'https://auth.whodis.io/...',
                aud: '__some_directory__',
                sub: '__some_user__',
                exp: 2516239022,
            });
        }));
    });
    given('ecc signing algorithm', () => {
        const alg = 'ES256';
        const keypair = exampleEccKeyPair;
        beforeEach(() => {
            getPublicKeyMock.mockReturnValue(keypair.publicKey);
        });
        it('should be able to create a token that we can later getAuthedClaims on', () => __awaiter(void 0, void 0, void 0, function* () {
            // create a token
            const token = createSecureDistributedAuthToken({
                headerClaims: { alg, kid: '4.some_directory', typ: 'JWT' },
                claims: {
                    iss: 'https://auth.whodis.io/...',
                    aud: '__some_directory__',
                    sub: '__some_user__',
                    exp: 2516239022,
                },
                privateKey: keypair.privateKey,
            });
            expect(typeof token).toEqual('string'); // sanity check
            // check that we can auth on it, if the publicKey is discoverable
            const claims = yield getAuthedClaims({
                token,
                issuer: 'https://auth.whodis.io/...',
                audience: '__some_directory__',
            });
            expect(claims).toEqual({
                iss: 'https://auth.whodis.io/...',
                aud: '__some_directory__',
                sub: '__some_user__',
                exp: 2516239022,
            });
        }));
    });
});
//# sourceMappingURL=createSecureDistributedAuthToken.integration.test.js.map