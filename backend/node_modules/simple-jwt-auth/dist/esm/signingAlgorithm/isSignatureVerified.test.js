var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { given, when, then } from 'test-fns';
import { createSigningKeyPair } from './createSigningKeyPair';
import { createVerifiableSignature } from './createVerifiableSignature';
import { exampleEccKeyPair, exampleRsaKeyPair, } from './createVerifiableSignature.test';
import { isSignatureVerified } from './isSignatureVerified';
describe('isSignatureVerified', () => {
    given('rsa signature', () => {
        const alg = 'RS256';
        const payload = 'hello';
        const keypair = exampleRsaKeyPair;
        when('payload and publickey are correct', () => {
            then('returns true', () => {
                const signature = createVerifiableSignature({
                    alg,
                    payload,
                    privateKey: keypair.privateKey,
                });
                const verified = isSignatureVerified({
                    alg,
                    signature,
                    payload,
                    publicKey: keypair.publicKey,
                });
                expect(verified).toEqual(true);
            });
        });
        when('payload is incorrect', () => {
            then('returns false', () => {
                const signature = createVerifiableSignature({
                    alg,
                    payload,
                    privateKey: keypair.privateKey,
                });
                const verified = isSignatureVerified({
                    alg,
                    signature,
                    payload: 'tampered payload',
                    publicKey: keypair.publicKey,
                });
                expect(verified).toEqual(false);
            });
        });
        when('publickey is incorrect', () => {
            then('returns false', () => __awaiter(void 0, void 0, void 0, function* () {
                const signature = createVerifiableSignature({
                    alg,
                    payload,
                    privateKey: keypair.privateKey,
                });
                const verified = isSignatureVerified({
                    alg,
                    signature,
                    payload,
                    publicKey: (yield createSigningKeyPair(alg)).publicKey,
                });
                expect(verified).toEqual(false);
            }));
        });
    });
    given('ecc signature', () => {
        const alg = 'ES256';
        const payload = 'hello';
        const keypair = exampleEccKeyPair;
        when('payload and publickey are correct', () => {
            then('returns true', () => {
                const signature = createVerifiableSignature({
                    alg,
                    payload,
                    privateKey: keypair.privateKey,
                });
                const verified = isSignatureVerified({
                    alg,
                    signature,
                    payload,
                    publicKey: keypair.publicKey,
                });
                expect(verified).toEqual(true);
            });
        });
        when('payload is incorrect', () => {
            then('returns false', () => {
                const signature = createVerifiableSignature({
                    alg,
                    payload,
                    privateKey: keypair.privateKey,
                });
                const verified = isSignatureVerified({
                    alg,
                    signature,
                    payload: 'tampered payload',
                    publicKey: keypair.publicKey,
                });
                expect(verified).toEqual(false);
            });
        });
        when('publickey is incorrect', () => {
            then('returns false', () => __awaiter(void 0, void 0, void 0, function* () {
                const signature = createVerifiableSignature({
                    alg,
                    payload,
                    privateKey: keypair.privateKey,
                });
                const verified = isSignatureVerified({
                    alg,
                    signature,
                    payload,
                    publicKey: (yield createSigningKeyPair(alg)).publicKey,
                });
                expect(verified).toEqual(false);
            }));
        });
    });
});
//# sourceMappingURL=isSignatureVerified.test.js.map