"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const SimpleJwtAuthError_1 = require("./SimpleJwtAuthError");
const createSecureDistributedAuthToken_1 = require("./createSecureDistributedAuthToken");
describe('createSecureDistributedAuthToken', () => {
    it('should require an asymmetric signing algorithm, since this is for distributed auth systems', () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            (0, createSecureDistributedAuthToken_1.createSecureDistributedAuthToken)({
                headerClaims: {
                    alg: 'HS256',
                    kid: '4.some_directory',
                    typ: 'JWT',
                },
                claims: {
                    iss: 'https://auth.whodis.io/...',
                    aud: '__some_directory__',
                    sub: '__some_user__',
                    exp: 2516239022,
                },
                privateKey: '__PRIVATE_KEY__',
            });
        }
        catch (error) {
            expect(error).toBeInstanceOf(SimpleJwtAuthError_1.SimpleJwtAuthError);
            expect(error.message).toContain('only asymmetric signing algorithms are allowed in distributed systems');
        }
    }));
    it('should require issuer to be defined', () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            (0, createSecureDistributedAuthToken_1.createSecureDistributedAuthToken)({
                headerClaims: {
                    alg: 'RS256',
                    kid: '4.some_directory',
                    typ: 'JWT',
                },
                claims: {
                    aud: '__some_directory__',
                    sub: '__some_user__',
                    exp: 2516239022,
                },
                privateKey: '__PRIVATE_KEY__',
            });
        }
        catch (error) {
            expect(error).toBeInstanceOf(SimpleJwtAuthError_1.SimpleJwtAuthError);
            expect(error.message).toContain('token.claims.iss must be defined when creating a secure token');
        }
    }));
    it('should require audience to be defined', () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            (0, createSecureDistributedAuthToken_1.createSecureDistributedAuthToken)({
                headerClaims: {
                    alg: 'RS256',
                    kid: '4.some_directory',
                    typ: 'JWT',
                },
                claims: {
                    iss: 'https://auth.whodis.io/...',
                    sub: '__some_user__',
                    exp: 2516239022,
                },
                privateKey: '__PRIVATE_KEY__',
            });
        }
        catch (error) {
            expect(error).toBeInstanceOf(SimpleJwtAuthError_1.SimpleJwtAuthError);
            expect(error.message).toContain('token.claims.aud must be defined when creating a secure token');
        }
    }));
    it('should require expiration to be defined', () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            (0, createSecureDistributedAuthToken_1.createSecureDistributedAuthToken)({
                headerClaims: {
                    alg: 'RS256',
                    kid: '4.some_directory',
                    typ: 'JWT',
                },
                claims: {
                    iss: 'https://auth.whodis.io/...',
                    aud: '__some_directory__',
                    sub: '__some_user__',
                },
                privateKey: '__PRIVATE_KEY__',
            });
        }
        catch (error) {
            expect(error).toBeInstanceOf(SimpleJwtAuthError_1.SimpleJwtAuthError);
            expect(error.message).toContain('token.claims.exp must be defined when creating a secure token');
        }
    }));
});
//# sourceMappingURL=createSecureDistributedAuthToken.test.js.map