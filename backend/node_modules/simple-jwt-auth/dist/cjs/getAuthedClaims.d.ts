import { MinimalTokenClaims } from './getUnauthedClaims';
/**
 * Authenticates the claims made by the JWT, conforming to highest security standards, before returning claims.
 *
 * Checks:
 * - that the token was issued by the expected issuer (prevents trusting malicious issuers)
 * - that the token was issued to be used by the expected audience (prevents trusting tokens issued for a different application to be hijacked used in yours)
 * - that the token is still valid based on timestamps (prevents having tokens that live forever - which are a greater risk if stolen)
 * - that an asymmetric signing algorithm was used (prevents accidental usage of symmetric signing algorithms in distributed setting)
 * - that the issuer really made these claims, by checking the signature (prevents malicious users from manipulating the claims in a token after its been issued)
 */
export declare const getAuthedClaims: <C extends MinimalTokenClaims>({ token, issuer, audience, jwksUri, }: {
    token: string;
    issuer: string;
    audience: string | string[];
    /**
     * the jwks uri at which the public key for this token can be found
     *
     * note
     * - for issuer's who support oauth2's discovery flow, this can be left blank, and the uri will be discovered (recommended)
     * - for issuer's who unable to support oauth2's discovery flow, this will need to be explicitly defined
     */
    jwksUri?: string | undefined;
}) => Promise<C>;
