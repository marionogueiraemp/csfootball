"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const getUnauthedClaims_1 = require("../getUnauthedClaims");
const redactSignature_1 = require("../redactSignature");
const PotentialCSRFAttackError_1 = require("./PotentialCSRFAttackError");
const getTokenFromHeaders_1 = require("./getTokenFromHeaders");
const exampleToken = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJmNWY3N2JjMC1iZTkwLTRmNGEtYmUyNS0wMThjYjUwZjBmMGEiLCJzdWIiOiIxMjM0NTY3ODkwIiwiYXVkIjoiaHR0cHM6Ly9hcGkud2hvZGlzLmlvIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.M_-_WjXeURe5M7JplujTq2Bl1V-MTm-Gxy9-DN4Qr8Q`;
describe('getTokenFromHeaders', () => {
    it('should get the token from authorization headers', () => {
        const headers = { authorization: `Bearer ${exampleToken}` };
        const token = (0, getTokenFromHeaders_1.getTokenFromHeaders)({ headers });
        expect(token).toEqual(exampleToken);
    });
    it('should get the token from cookie headers', () => {
        const headers = {
            cookie: `authorization=${exampleToken}`,
            authorization: `Bearer ${(0, redactSignature_1.redactSignature)({ token: exampleToken })}`,
            origin: (0, getUnauthedClaims_1.getUnauthedClaims)({ token: exampleToken }).aud, // required for CSRF protection
        };
        const token = (0, getTokenFromHeaders_1.getTokenFromHeaders)({ headers });
        expect(token).toEqual(exampleToken);
    });
    it('should throw PotentialCSRFAttack errors if one of the CSRF conditions is not met', () => {
        const headers = {
            cookie: `authorization=${exampleToken}`,
            origin: 'https://evil-attacker.com', // attacker sends a request, without an anti-csrf-token too
        };
        try {
            (0, getTokenFromHeaders_1.getTokenFromHeaders)({ headers });
            throw new Error('should not reach here');
        }
        catch (error) {
            expect(error).toBeInstanceOf(PotentialCSRFAttackError_1.PotentialCSRFAttackError);
        }
    });
});
//# sourceMappingURL=getTokenFromHeaders.integration.test.js.map