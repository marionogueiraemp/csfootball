"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuthedClaims = void 0;
const SimpleJwtAuthError_1 = require("./SimpleJwtAuthError");
const getPublicKey_1 = require("./getPublicKey/getPublicKey");
const getSignedClaims_1 = require("./getSignedClaims");
const verifyTokenIntent_1 = require("./verification/verifyTokenIntent");
const verifyTokenShape_1 = require("./verification/verifyTokenShape");
const verifyTokenTimestamps_1 = require("./verification/verifyTokenTimestamps");
/**
 * Authenticates the claims made by the JWT, conforming to highest security standards, before returning claims.
 *
 * Checks:
 * - that the token was issued by the expected issuer (prevents trusting malicious issuers)
 * - that the token was issued to be used by the expected audience (prevents trusting tokens issued for a different application to be hijacked used in yours)
 * - that the token is still valid based on timestamps (prevents having tokens that live forever - which are a greater risk if stolen)
 * - that an asymmetric signing algorithm was used (prevents accidental usage of symmetric signing algorithms in distributed setting)
 * - that the issuer really made these claims, by checking the signature (prevents malicious users from manipulating the claims in a token after its been issued)
 */
const getAuthedClaims = ({ token, issuer, audience, jwksUri, }) => __awaiter(void 0, void 0, void 0, function* () {
    // runtime validation: confirm and audiences were defined (everyone has types until they get punched in the runtime - mike tyson)
    if (!issuer)
        throw new SimpleJwtAuthError_1.SimpleJwtAuthError('expected issuer must be defined for secure distributed jwt authentication');
    if (!audience)
        throw new SimpleJwtAuthError_1.SimpleJwtAuthError('expected audience must be defined for secure distributed jwt authentication');
    const audiences = Array.isArray(audience) ? audience : [audience]; // normalize it to a more generic form in the process
    if (!audiences.length)
        throw new SimpleJwtAuthError_1.SimpleJwtAuthError('at least one expected audience must be defined for secure distributed jwt authentication');
    // check that the token has standard and expected shape
    yield (0, verifyTokenShape_1.verifyTokenShape)({ token });
    // check whether the audience and issuer of the token match, before even looking at verifying signature; critical for security in distributed system
    yield (0, verifyTokenIntent_1.verifyTokenIntent)({
        token,
        intendedIssuer: issuer,
        intendedAudiences: audiences,
    });
    // check the timestamps to confirm the token is not expired
    yield (0, verifyTokenTimestamps_1.verifyTokenTimestamps)({ token });
    // check that the token was signed correctly and safely; if so, grab claims
    const publicKey = yield (0, getPublicKey_1.getPublicKey)({ token, jwksUri });
    const signedClaims = yield (0, getSignedClaims_1.getSignedClaims)({ token, publicKey });
    // since the claims passed all of the checks above, they have now been authenticated
    return signedClaims;
});
exports.getAuthedClaims = getAuthedClaims;
//# sourceMappingURL=getAuthedClaims.js.map