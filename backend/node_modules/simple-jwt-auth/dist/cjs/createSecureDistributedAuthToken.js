"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSecureDistributedAuthToken = void 0;
const SimpleJwtAuthError_1 = require("./SimpleJwtAuthError");
const base64UrlEncode_1 = require("./base64Url/base64UrlEncode");
const createVerifiableSignature_1 = require("./signingAlgorithm/createVerifiableSignature");
const isAsymmetricSigningAlgorithm_1 = require("./signingAlgorithm/isAsymmetricSigningAlgorithm");
/**
 * Creates secure, authenticatable tokens for a distributed system - enforcing security standards
 */
const createSecureDistributedAuthToken = ({ headerClaims, claims, privateKey, }) => {
    // check that the signing algorithm is asymmetric
    if (!(0, isAsymmetricSigningAlgorithm_1.isAsymmetricSigningAlgorithm)(headerClaims.alg))
        throw new SimpleJwtAuthError_1.SimpleJwtAuthError('only asymmetric signing algorithms are allowed in distributed systems');
    // check that an issuer and audience have been defined
    if (!claims.iss)
        throw new SimpleJwtAuthError_1.SimpleJwtAuthError('token.claims.iss must be defined when creating a secure token');
    if (!claims.aud)
        throw new SimpleJwtAuthError_1.SimpleJwtAuthError('token.claims.aud must be defined when creating a secure token');
    // check that expiration has been defined
    if (!claims.exp)
        throw new SimpleJwtAuthError_1.SimpleJwtAuthError('token.claims.exp must be defined when creating a secure token');
    // create a token
    const payload = [
        (0, base64UrlEncode_1.base64UrlEncode)(JSON.stringify(headerClaims)),
        (0, base64UrlEncode_1.base64UrlEncode)(JSON.stringify(claims)),
    ].join('.');
    const signature = (0, createVerifiableSignature_1.createVerifiableSignature)({
        alg: headerClaims.alg,
        payload,
        privateKey,
    });
    const token = [...payload.split('.'), signature].join('.');
    // return the token
    return token;
};
exports.createSecureDistributedAuthToken = createSecureDistributedAuthToken;
//# sourceMappingURL=createSecureDistributedAuthToken.js.map