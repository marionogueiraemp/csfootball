"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVerifiableSignature = void 0;
const castBase64ToBase64Url_1 = require("../base64Url/castBase64ToBase64Url");
const castJwtAlgToCryptoAlg_1 = require("./castJwtAlgToCryptoAlg");
const importCrypto_1 = require("./importCrypto");
const isEllipticSigningAlgorithm_1 = require("./isEllipticSigningAlgorithm");
const createVerifiableSignature = ({ alg, payload, privateKey, }) => {
    const crypto = (0, importCrypto_1.importCrypto)();
    const cryptoAlg = (0, castJwtAlgToCryptoAlg_1.castJwtAlgToCryptoAlg)(alg);
    const signatureBuffer = crypto
        .createSign(cryptoAlg)
        .update(payload)
        .sign({
        key: privateKey,
        dsaEncoding: (0, isEllipticSigningAlgorithm_1.isEllipticSigningAlgorithm)(alg) ? 'ieee-p1363' : undefined, // if its an elliptic signing algorithm, we must specify the specific encoding format, since node defaults to DER while jwt's use IEEE; https://stackoverflow.com/questions/39499040/generating-ecdsa-signature-with-node-js-crypto?rq=3
    });
    const signature = (0, castBase64ToBase64Url_1.castBase64ToBase64Url)(signatureBuffer.toString('base64'));
    return signature;
};
exports.createVerifiableSignature = createVerifiableSignature;
//# sourceMappingURL=createVerifiableSignature.js.map