"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSigningKeyPair = void 0;
const error_fns_1 = require("@ehmpathy/error-fns");
const importCrypto_1 = require("./importCrypto");
const isEllipticSigningAlgorithm_1 = require("./isEllipticSigningAlgorithm");
/**
 * defines the name of the curve to use for the given elliptic signing algo
 *
 * note
 * - valid options come from the node version's respective openssl library:  https://github.com/nodejs/node/blob/v15.12.0/deps/openssl/openssl/crypto/ec/ec_curve.c#L3163
 */
const ELLIPTIC_SIGNING_ALGORITHM_TO_CURVE_NAME_REGISTRY = {
    ES256: 'P-256',
    ES384: 'P-384',
};
/**
 * method which creates a signing key pair for the given signing algorithm
 */
const createSigningKeyPair = (alg) => __awaiter(void 0, void 0, void 0, function* () {
    // grab the crypto module
    const crypto = yield (0, importCrypto_1.importCrypto)();
    // support elliptical signing algorithms
    if ((0, isEllipticSigningAlgorithm_1.isEllipticSigningAlgorithm)(alg)) {
        const { publicKey, privateKey } = yield new Promise((resolve, reject) => crypto.generateKeyPair('ec', {
            namedCurve: ELLIPTIC_SIGNING_ALGORITHM_TO_CURVE_NAME_REGISTRY[alg],
            publicKeyEncoding: {
                type: 'spki',
                format: 'pem',
            },
            privateKeyEncoding: {
                type: 'pkcs8',
                format: 'pem',
            },
        }, (error, thisPublicKey, thisPrivateKey) => error
            ? reject(error)
            : resolve({ publicKey: thisPublicKey, privateKey: thisPrivateKey })));
        return {
            format: 'pem',
            publicKey,
            privateKey,
        };
    }
    // support rsa signing algorithms
    if (alg.startsWith('RS')) {
        const { publicKey, privateKey } = yield new Promise((resolve, reject) => crypto.generateKeyPair('rsa', {
            modulusLength: 2048,
            publicKeyEncoding: {
                type: 'spki',
                format: 'pem',
            },
            privateKeyEncoding: {
                type: 'pkcs8',
                format: 'pem',
            },
        }, (error, thisPublicKey, thisPrivateKey) => error
            ? reject(error)
            : resolve({ publicKey: thisPublicKey, privateKey: thisPrivateKey })));
        return {
            format: 'pem',
            publicKey,
            privateKey,
        };
    }
    // otherwise, unexpected algo
    throw new error_fns_1.UnexpectedCodePathError('unsupported algorithm specified', { alg });
});
exports.createSigningKeyPair = createSigningKeyPair;
//# sourceMappingURL=createSigningKeyPair.js.map