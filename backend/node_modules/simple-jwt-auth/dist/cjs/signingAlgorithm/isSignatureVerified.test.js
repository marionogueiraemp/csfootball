"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_fns_1 = require("test-fns");
const createSigningKeyPair_1 = require("./createSigningKeyPair");
const createVerifiableSignature_1 = require("./createVerifiableSignature");
const createVerifiableSignature_test_1 = require("./createVerifiableSignature.test");
const isSignatureVerified_1 = require("./isSignatureVerified");
describe('isSignatureVerified', () => {
    (0, test_fns_1.given)('rsa signature', () => {
        const alg = 'RS256';
        const payload = 'hello';
        const keypair = createVerifiableSignature_test_1.exampleRsaKeyPair;
        (0, test_fns_1.when)('payload and publickey are correct', () => {
            (0, test_fns_1.then)('returns true', () => {
                const signature = (0, createVerifiableSignature_1.createVerifiableSignature)({
                    alg,
                    payload,
                    privateKey: keypair.privateKey,
                });
                const verified = (0, isSignatureVerified_1.isSignatureVerified)({
                    alg,
                    signature,
                    payload,
                    publicKey: keypair.publicKey,
                });
                expect(verified).toEqual(true);
            });
        });
        (0, test_fns_1.when)('payload is incorrect', () => {
            (0, test_fns_1.then)('returns false', () => {
                const signature = (0, createVerifiableSignature_1.createVerifiableSignature)({
                    alg,
                    payload,
                    privateKey: keypair.privateKey,
                });
                const verified = (0, isSignatureVerified_1.isSignatureVerified)({
                    alg,
                    signature,
                    payload: 'tampered payload',
                    publicKey: keypair.publicKey,
                });
                expect(verified).toEqual(false);
            });
        });
        (0, test_fns_1.when)('publickey is incorrect', () => {
            (0, test_fns_1.then)('returns false', () => __awaiter(void 0, void 0, void 0, function* () {
                const signature = (0, createVerifiableSignature_1.createVerifiableSignature)({
                    alg,
                    payload,
                    privateKey: keypair.privateKey,
                });
                const verified = (0, isSignatureVerified_1.isSignatureVerified)({
                    alg,
                    signature,
                    payload,
                    publicKey: (yield (0, createSigningKeyPair_1.createSigningKeyPair)(alg)).publicKey,
                });
                expect(verified).toEqual(false);
            }));
        });
    });
    (0, test_fns_1.given)('ecc signature', () => {
        const alg = 'ES256';
        const payload = 'hello';
        const keypair = createVerifiableSignature_test_1.exampleEccKeyPair;
        (0, test_fns_1.when)('payload and publickey are correct', () => {
            (0, test_fns_1.then)('returns true', () => {
                const signature = (0, createVerifiableSignature_1.createVerifiableSignature)({
                    alg,
                    payload,
                    privateKey: keypair.privateKey,
                });
                const verified = (0, isSignatureVerified_1.isSignatureVerified)({
                    alg,
                    signature,
                    payload,
                    publicKey: keypair.publicKey,
                });
                expect(verified).toEqual(true);
            });
        });
        (0, test_fns_1.when)('payload is incorrect', () => {
            (0, test_fns_1.then)('returns false', () => {
                const signature = (0, createVerifiableSignature_1.createVerifiableSignature)({
                    alg,
                    payload,
                    privateKey: keypair.privateKey,
                });
                const verified = (0, isSignatureVerified_1.isSignatureVerified)({
                    alg,
                    signature,
                    payload: 'tampered payload',
                    publicKey: keypair.publicKey,
                });
                expect(verified).toEqual(false);
            });
        });
        (0, test_fns_1.when)('publickey is incorrect', () => {
            (0, test_fns_1.then)('returns false', () => __awaiter(void 0, void 0, void 0, function* () {
                const signature = (0, createVerifiableSignature_1.createVerifiableSignature)({
                    alg,
                    payload,
                    privateKey: keypair.privateKey,
                });
                const verified = (0, isSignatureVerified_1.isSignatureVerified)({
                    alg,
                    signature,
                    payload,
                    publicKey: (yield (0, createSigningKeyPair_1.createSigningKeyPair)(alg)).publicKey,
                });
                expect(verified).toEqual(false);
            }));
        });
    });
});
//# sourceMappingURL=isSignatureVerified.test.js.map