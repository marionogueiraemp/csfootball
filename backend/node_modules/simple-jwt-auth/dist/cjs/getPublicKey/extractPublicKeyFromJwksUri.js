"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractPublicKeyFromJwksUri = exports.ExtractPublicKeyFromJwksUriError = void 0;
const SimpleJwtAuthError_1 = require("../SimpleJwtAuthError");
const discoverJwksUriFromAuthServerMetadata_1 = require("./discoverJwksUriFromAuthServerMetadata");
class ExtractPublicKeyFromJwksUriError extends SimpleJwtAuthError_1.SimpleJwtAuthError {
    constructor({ reason }) {
        const message = `
${reason}

Can not extract public key from jwks uri.
    `.trim();
        super(message);
    }
}
exports.ExtractPublicKeyFromJwksUriError = ExtractPublicKeyFromJwksUriError;
/**
 * extracts the public key of a token from a jwks uri
 */
const extractPublicKeyFromJwksUri = ({ headerClaims, jwksUri, }) => __awaiter(void 0, void 0, void 0, function* () {
    // lookup the jwks with this uri
    const { data } = yield (0, discoverJwksUriFromAuthServerMetadata_1.getOrThrowStandardError)(jwksUri);
    const jwks = Array.isArray(data) ? data : data.keys; // try checking both the "keys" property as well as checking if the whole thing is an array
    // try to find the jwk of this token
    if (!Array.isArray(jwks))
        throw new ExtractPublicKeyFromJwksUriError({
            reason: 'The JSON Web Key Set (JWKS) specified by the Auth Server Metadata is malformed. It is not an array.',
        });
    const jwk = jwks.find((thisJwk) => thisJwk.kid === headerClaims.kid);
    if (!jwk)
        throw new ExtractPublicKeyFromJwksUriError({
            reason: 'Could not find a JSON Web Key (JWK) with the KeyId specified by the token (`token.header.kid`) in the JSON Web Key Set (JWKS) specified by the Auth Server Metadata',
        });
    // convert the jwk into a pem cert, since most libs expect pem
    const publicKey = (0, discoverJwksUriFromAuthServerMetadata_1.jwkToPemOrThrowStandardError)(jwk);
    // return the public key
    return publicKey;
});
exports.extractPublicKeyFromJwksUri = extractPublicKeyFromJwksUri;
//# sourceMappingURL=extractPublicKeyFromJwksUri.js.map