"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const error_fns_1 = require("@ehmpathy/error-fns");
const axios_1 = __importDefault(require("axios"));
const test_fns_1 = require("test-fns");
const getUnauthedClaims_1 = require("../getUnauthedClaims");
const discoverJwksUriFromAuthServerMetadata_1 = require("./discoverJwksUriFromAuthServerMetadata");
jest.mock('axios');
const axiosGetMock = axios_1.default.get;
describe('discoverJwksUriFromAuthServerMetadata', () => {
    beforeEach(() => jest.clearAllMocks());
    (0, test_fns_1.when)(`a token's issuer is not a public host`, () => {
        const token = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Il9fa2V5X2lkX18ifQ.eyJpc3MiOiJ3aG9kaXMuaW8iLCJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.mxJ5X3dmoIItWYU5ab5B0HK1DlFaJA4EX2fUQyJ_0yc`;
        const claims = (0, getUnauthedClaims_1.getUnauthedClaims)({ token });
        (0, test_fns_1.then)('we should throw an error to avoid executing an `http:get` on random strings', () => __awaiter(void 0, void 0, void 0, function* () {
            try {
                yield (0, discoverJwksUriFromAuthServerMetadata_1.discoverJwksUriFromAuthServerMetadata)({ claims });
                throw new Error('should not reach here');
            }
            catch (error) {
                expect(error).toBeInstanceOf(discoverJwksUriFromAuthServerMetadata_1.DiscoverJwksUriFromAuthServerMetadataError);
                expect(error.message).toContain('Issuer does not define a public server (i.e., does not start with `http://` or `https://`). Found `whodis.io`');
            }
        }));
    });
    (0, test_fns_1.when)('the token.issuer !== auth server metadata.issuer', () => {
        const token = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Il9fa2V5X2lkX18ifQ.eyJpc3MiOiJodHRwczovL2F1dGgud2hvZGlzLmlvLy4uLiIsInN1YiI6IjEyMzQ1Njc4OTAiLCJuYW1lIjoiSm9obiBEb2UiLCJpYXQiOjE1MTYyMzkwMjJ9.AvXcwdU4amvp-eQwREHAQORKAbUe-crJuJoabABS_fE`;
        const claims = (0, getUnauthedClaims_1.getUnauthedClaims)({ token });
        beforeEach(() => axiosGetMock.mockReturnValue({
            data: { issuer: 'not the same issuer' },
        }));
        (0, test_fns_1.then)('we should throw an error since this could be a security risk', () => __awaiter(void 0, void 0, void 0, function* () {
            const error = yield (0, error_fns_1.getError)((0, discoverJwksUriFromAuthServerMetadata_1.discoverJwksUriFromAuthServerMetadata)({ claims }));
            expect(error).toBeInstanceOf(discoverJwksUriFromAuthServerMetadata_1.DiscoverJwksUriFromAuthServerMetadataError);
            expect(error.message).toContain('Token issuer does not match the issuer defined in the auth server metadata found for the issuer. This is a security concern. Found `not the same issuer` but expected `https://auth.whodis.io/...`.');
        }));
    });
    (0, test_fns_1.when)('it successfully finds the jwks uri', () => {
        beforeEach(() => axiosGetMock.mockReturnValue({
            data: {
                issuer: 'https://auth.whodis.io/c71b8fd1-bba7-47ee-966b-65ab85b34972',
                jwks_uri: 'https://auth.whodis.io/c71b8fd1-bba7-47ee-966b-65ab85b34972/jwks.json',
            },
        }));
        (0, test_fns_1.then)('it should return the jwks uri it found', () => __awaiter(void 0, void 0, void 0, function* () {
            const token = `eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRkLmM3MWI4ZmQxLWJiYTctNDdlZS05NjZiLTY1YWI4NWIzNDk3MiJ9.eyJpc3MiOiJodHRwczovL2F1dGgud2hvZGlzLmlvL2M3MWI4ZmQxLWJiYTctNDdlZS05NjZiLTY1YWI4NWIzNDk3MiIsInN1YiI6ImJlZWZiZWVmLWJlZWYtYmVlZi1iZWVmLWJlZWZiZWVmYmVlZiIsImF1ZCI6ImM3MWI4ZmQxLWJiYTctNDdlZS05NjZiLTY1YWI4NWIzNDk3MiIsImlhdCI6MTYwMDYyNTMzNiwibmJmIjoxNjAwNjI1MzM2LCJleHAiOjE2MDA2Njg1MzYsInR0bCI6MTYwMTkyMTMzNn0.F58A0ARfGujb7n5KMCwcbbwPh7UcH50y6ohWDzEIJRbkMoqvfZpyn6D8xrK_hyOtM54wP7UUJrtEK-XzfzzwyvZ9EYIWEhBZhHbHWqpYTEgxvM9gDaGgvqtuc5CuManfwONZh9ETxnVjY-NaigmIjpOog8C08wQ9e_DADJsdEmtdb_y0HWBuIo1lKOwdLFfEF7RJ-9ZZ415u_MCNjxhvn4CykQBIB92LYlfnbU6MpzeMo1QG7Tt3X8J_pbsTz4TsGD58vQHq01ibp8MXSZ-KoxE7Vs5BYS7o0-vU7yhkpH1TuoapUmWBI8ZFaOr-ym8E5iBvu-xn3Ms20PFigxiyzHddm9r2Z2MWiffYPhC8xHbM1IL3kSin-2wK7_3EdQT1X7_V8mk6ZJXaqBtvtL0nAx8Zf5JBcgj-mKbPQMtUM2aneHKU7rf5BFX9F-MfJhczn5ZiowmQOJruKOsPQRHNeR87VZprD_aDP6Q_5LcklCJoz3Ol-n3I-2YccCGgwilHF7bDlv4fGQlXXdZEDDYZwdA8U_SvuxPhowPqlOheeERgBjbxdodLHOgBfMR1hsvAqOmedOVCUREM3fiN7-iA3KdStpS6C2-_NHHGUwOlc1dCgbHYMLpJ565k98drCzancl3-Od5i6B5JqaFh7_n7-34R0s0sph9fkGoznVF4ZJM`;
            const claims = (0, getUnauthedClaims_1.getUnauthedClaims)({ token });
            const jwksUri = yield (0, discoverJwksUriFromAuthServerMetadata_1.discoverJwksUriFromAuthServerMetadata)({
                claims,
            });
            expect(jwksUri).toEqual('https://auth.whodis.io/c71b8fd1-bba7-47ee-966b-65ab85b34972/jwks.json');
        }));
    });
});
//# sourceMappingURL=discoverJwksUriFromAuthServerMetadata.test.js.map