"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.discoverJwksUriFromAuthServerMetadata = exports.jwkToPemOrThrowStandardError = exports.getOrThrowStandardError = exports.DiscoverJwksUriFromAuthServerMetadataError = void 0;
const axios_1 = __importDefault(require("axios"));
const jwk_to_pem_1 = __importDefault(require("jwk-to-pem"));
const SimpleJwtAuthError_1 = require("../SimpleJwtAuthError");
class DiscoverJwksUriFromAuthServerMetadataError extends SimpleJwtAuthError_1.SimpleJwtAuthError {
    constructor({ reason }) {
        const message = `
${reason}

Can not discover jwks uri from auth server metadata.
    `.trim();
        super(message);
    }
}
exports.DiscoverJwksUriFromAuthServerMetadataError = DiscoverJwksUriFromAuthServerMetadataError;
const getOrThrowStandardError = (uri) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        return yield axios_1.default.get(uri);
    }
    catch (error) {
        throw new DiscoverJwksUriFromAuthServerMetadataError({
            reason: `Found error attempting to execute \`GET:${uri}\`: ${error.message}`,
        });
    }
});
exports.getOrThrowStandardError = getOrThrowStandardError;
const jwkToPemOrThrowStandardError = (jwk) => {
    try {
        return (0, jwk_to_pem_1.default)(jwk);
    }
    catch (error) {
        throw new DiscoverJwksUriFromAuthServerMetadataError({
            reason: `Found error attempting to cast JWK to PEM: ${error.message}`,
        });
    }
};
exports.jwkToPemOrThrowStandardError = jwkToPemOrThrowStandardError;
const discoverJwksUriFromAuthServerMetadata = ({ claims, }) => __awaiter(void 0, void 0, void 0, function* () {
    const issuer = claims.iss;
    // check that issuer defines an http(s) host
    const looksLikeUrl = new RegExp(/^https?:\/\//i).test(issuer);
    if (!looksLikeUrl)
        throw new DiscoverJwksUriFromAuthServerMetadataError({
            reason: `Issuer does not define a public server (i.e., does not start with \`http://\` or \`https://\`). Found \`${issuer}\``,
        });
    // try to find the issuer's "authorization-server-metadata" in the well known location
    const metadataAddress = `${issuer}/.well-known/oauth-authorization-server`;
    const { data: metadata } = yield (0, exports.getOrThrowStandardError)(metadataAddress);
    // check that the issuer in the auth-server-metadata matches the token's issuer
    if (metadata.issuer !== issuer)
        throw new DiscoverJwksUriFromAuthServerMetadataError({
            reason: `Token issuer does not match the issuer defined in the auth server metadata found for the issuer. This is a security concern. Found \`${metadata.issuer}\` but expected \`${issuer}\`.`,
        });
    // check that the data defines the jwkUri
    const jwksUri = metadata.jwks_uri;
    if (!jwksUri)
        throw new DiscoverJwksUriFromAuthServerMetadataError({
            reason: `Auth server metadata does not define a \`jwks_uri\``,
        });
    // return the jwks uri
    return jwksUri;
});
exports.discoverJwksUriFromAuthServerMetadata = discoverJwksUriFromAuthServerMetadata;
//# sourceMappingURL=discoverJwksUriFromAuthServerMetadata.js.map